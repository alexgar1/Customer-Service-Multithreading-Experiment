1. How many threads are you going to use? Specify the task that you intend each thread to perform.

1 main thread for handling other threads and intializing
1 thread for each clerk (5 total)
1 thread for each customer

2. Do the threads work independently? Or, is there an overall “controller” thread?

There will be one controller thread that iniates/destroys other threads that act independently of each other.

3. How many mutexes are you going to use? Specify the operation that each mutex will guard.

Queue mutexes: Two mutexes, one for each customer queue (economy and business). These mutexes will protect the operations of adding or removing customers from the queues.
Clerk mutexes: One mutex per clerk to ensure that each clerk serves one customer at a time without interference.

4. Will the main thread be idle? If not, what will it be doing?

The main thread will be idle after customer and clerk threads have been initiated and doesn't work again until they have finished at which point 
all threads are joined.

5. How are you going to represent customers? what type of data structure will you use?

Customers will be reperesented by a struct with their id, class, arrival time and service time upon parsing from the input text file.
After which they will be converted into nodes in a linked list implementation of a queue with the same information plus the next node in the link.
Customers will be added to one of two queues depending on their class.

6. How are you going to ensure that data structures in your program will not be modified concurrently?

Mutexes will guard each queue 

7. How many convars are you going to use? For each convar:
(a) Describe the condition that the convar will represent.
(b) Which mutex is associated with the convar? Why?
(c) What operation should be performed once pthread cond wait() has been unblocked and re-
acquired the mutex?

2 queue covars
(a) indicates that clerk is ready to serve a certain queue. clerk signals and customer listens.
(b) 'qmutex' because it is associated with locking the queue for modification.
(c) node is removed from queue and clerk helps customer. Doesn't happen until customer is at the front of the line and clerk is ready to help.

5 clerk covars
(a) signaled by customer when the customer has finished being serviced so the clerk knows to move on.
(b) 'clerkmutex' this mutex simply protects the condvar.
(c) once the covar signaled the clerk knows it is ready to move onto the next customer.

8. Briefly sketch the overall algorithm you will use. You may use sentences such as: If clerk i finishes
service, release clerkImutex.

Function readCustomers:
    Open customer data file
    Read number of customers
    For each customer, read their details

Function getCurrentSimulationTime:
    Calculate and return the current simulation time

Thread function clerk:
    While not all customers are finished:
        Try to help next customer from business queue
        If no business customers, try from economy queue
        If a customer is found and not already helped:
            Mark customer as being helped
            Wait until the customer signals completion
        Else continue looking
    Exit thread

Thread function customer:
    Wait until arrival time
    Join the appropriate queue
    Wait to be helped by a clerk
    When helped, simulate service time
    Signal the clerk on completion
    Update waiting times for business or economy
    Exit thread

Main function:
    Read command-line arguments for customer data file
    Load customer data
    Initialize mutexes and condition variables for queues and clerks
    Create threads for each customer and clerk
    Wait for all threads to finish
    Output average waiting times and handled complaints
    Clean up resources
    Exit program
